import { commify } from "../src/formatting/comma";
import { describe, expect, test } from 'bun:test';

describe("commify", () => {
    const testList: [number | bigint, string][] = [
        [0, "0"],
        [10, "10"],
        [100, "100"],
        [1_000, "1,000"],
        [10_000, "10,000"],
        [100_000, "100,000"],
        [10_000_000, "10,000,000"],
        [10_100_000, "10,100,000"],
        [10_010_000, "10,010,000"],
        [10_001_000, "10,001,000"],
        [123_456_789, "123,456,789"],
        [BigInt("9223372000000000000"), "9,223,372,000,000,000,000"],
        [BigInt("9223372036854775807"), "9,223,372,036,854,775,807"],
        [BigInt("-9223372036854775808"), "-9,223,372,036,854,775,808"],
        [BigInt("-9223372000000000000"), "-9,223,372,000,000,000,000"],
        [-123_456_789, "-123,456,789"],
        [-10_100_000, "-10,100,000"],
        [-10_010_000, "-10,010,000"],
        [-10_001_000, "-10,001,000"],
        [-10_000_000, "-10,000,000"],
        [-100_000, "-100,000"],
        [-10_000, "-10,000"],
        [-1_000, "-1,000"],
        [-100, "-100"],
        [-10, "-10"],
    ];

    test.each(testList)("%p should format to %p", (num, str) => {
        expect(commify(num)).toBe(str);
    });

    describe("with decimals", () => {
        const floatList: [number, string][] = [
            [1000.01, "1,000.01"],
            [1000000.123, "1,000,000.123"],
            [-1000.01, "-1,000.01"],
            [-1000000.123, "-1,000,000.123"],
            [0.123, "0.123"],
            [-0.123, "-0.123"],
            [123456789.987654, "123,456,789.988"],
            [-123456789.987654, "-123,456,789.988"],
        ];

        test.each(floatList)("%p should format to %p", (num, str) => {
            expect(commify(num)).toBe(str);
        });
    });

    test("with locale", () => {
        const input = 1234567.891;
        const NBSP = String.fromCharCode(160);

        expect(commify(input)).toBe("1,234,567.891");
        expect(commify(input, "de-DE")).toBe("1.234.567,891");
        expect(commify(input, ["fr-CA", "en-US"])).toBe(`1${NBSP}234${NBSP}567,891`);
    });
});
